Bubble Sort:
Strengths:

Bubble Sort is easy to understand and implement, making it a good choice for educational purposes and small datasets.
It performs well on nearly sorted arrays, as its best-case time complexity is O(n).
Bubble Sort is an in-place sorting algorithm, meaning it requires minimal additional memory.
Weaknesses:

Inefficient for large datasets due to its worst and average-case time complexity of O(n^2).
Bubble Sort performs poorly on already sorted or partially sorted arrays, making it less practical for real-world applications.
As the dataset size increases, the execution time of Bubble Sort grows significantly, making it less suitable for performance-critical scenarios.
Insertion Sort:
Strengths:

Insertion Sort is also relatively easy to understand and implement, making it a good choice for small datasets and educational purposes.
It performs well on nearly sorted arrays, similar to Bubble Sort.
Insertion Sort's best-case time complexity is O(n), which is favorable for small datasets.
Weaknesses:

Inefficient for large datasets due to its worst and average-case time complexity of O(n^2).
Similar to Bubble Sort, Insertion Sort's performance degrades significantly as the dataset size increases, making it less practical for large-scale sorting tasks.
Although it is an in-place sorting algorithm, it may require more element swaps than Bubble Sort in certain cases, making it slightly less efficient.

Conclusion:
       However bubble sort has taken less time than insertion sort.So its very easy to maintanence.In bubble sort time taken 0.555ms but insertion sort taken 1.655ms.